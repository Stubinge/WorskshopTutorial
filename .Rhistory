#set.seed(7)
#fit.lda <- train(Death~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Death~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Death~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Death~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Death~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list( cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
# summarize Best Model
print(fit.cart)
?createDataPartition
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(e1071)
library(kernlab)
library(readxl)
# Download the data
dataset <- read_excel("SimplifiedHNData.xlsx")
# remove Sex and Patient
dataset<-dataset[,3:7]
sapply(dataset, class)
dataset$Age<-as.numeric(dataset$Age)
dataset$PrimarySite<-as.factor(dataset$PrimarySite)
#dataset$Therapy<-as.factor(dataset$Therapy)
dataset$Death<-as.factor(dataset$Death)
dataset$TStage<-ordered(dataset$TStage,levels=c("Tx","T1", "T2","T3","T4","T4a","T4b"))
dataset$NStage<-ordered(dataset$NStage)
sapply(dataset, class)
# create a list of 80% of the rows in the original dataset we can use for training
set.seed(3456)
validation_index <- createDataPartition(dataset$Age, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
#dimensions of the dataset
dim(dataset)
#Look at the data
head(dataset)
#what levels are in the data?
levels(dataset$PrimarySite)
#Summarise the class distribution
percentage <- prop.table(table(dataset$PrimarySite)) * 100
cbind(freq=table(dataset$PrimarySite), percentage=percentage)
#Statistical summary
summary(dataset)
# split input and output
x <- dataset[,1:4]
y <- dataset[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
boxplot(x[,1], main=names(dataset)[1])
for(i in 2:4) {
plot(x[,i], main=names(dataset)[i])
}
# scatterplot matrix
featurePlot(x=x, y=y, plot="pairs")
qplot(Age, Death, colour=PrimarySite, data=dataset)
qplot(Age, TStage, colour=PrimarySite, data=dataset)
qplot(Age, NStage, colour=TStage, data=dataset)
qplot(PrimarySite, Age, data=dataset,
fill=PrimarySite,
geom=c("boxplot"))
tapply(dataset$Age, dataset$PrimarySite, summary)
qplot(Age, colour=PrimarySite, data=dataset, geom="density")
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# a) linear algorithms
#set.seed(7)
#fit.lda <- train(Death~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Death~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Death~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Death~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Death~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list( cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
# summarize Best Model
print(fit.cart)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(e1071)
library(kernlab)
library(readxl)
# Download the data
dataset <- read_excel("SimplifiedHNData.xlsx")
# remove Sex and Patient
dataset<-dataset[,3:7]
sapply(dataset, class)
dataset$Age<-as.numeric(dataset$Age)
dataset$PrimarySite<-as.factor(dataset$PrimarySite)
#dataset$Therapy<-as.factor(dataset$Therapy)
dataset$Death<-as.factor(dataset$Death)
dataset$TStage<-ordered(dataset$TStage,levels=c("Tx","T1", "T2","T3","T4","T4a","T4b"))
dataset$NStage<-ordered(dataset$NStage)
sapply(dataset, class)
# create a list of 80% of the rows in the original dataset we can use for training
set.seed(3456)
validation_index <- createDataPartition(dataset$Age, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
#dimensions of the dataset
dim(dataset)
#Look at the data
head(dataset)
#what levels are in the data?
levels(dataset$PrimarySite)
#Summarise the class distribution
percentage <- prop.table(table(dataset$PrimarySite)) * 100
cbind(freq=table(dataset$PrimarySite), percentage=percentage)
#Statistical summary
summary(dataset)
# split input and output
x <- dataset[,1:4]
y <- dataset[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
boxplot(x[,1], main=names(dataset)[1])
for(i in 2:4) {
plot(x[,i], main=names(dataset)[i])
}
# scatterplot matrix
featurePlot(x=x, y=y, plot="pairs")
qplot(Age, Death, colour=PrimarySite, data=dataset)
qplot(Age, TStage, colour=PrimarySite, data=dataset)
qplot(Age, NStage, colour=TStage, data=dataset)
qplot(PrimarySite, Age, data=dataset,
fill=PrimarySite,
geom=c("boxplot"))
tapply(dataset$Age, dataset$PrimarySite, summary)
qplot(Age, colour=PrimarySite, data=dataset, geom="density")
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# a) linear algorithms
#set.seed(7)
#fit.lda <- train(Death~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Death~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Death~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Death~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Death~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list( cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
# summarize Best Model
print(fit.cart)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(e1071)
library(kernlab)
library(readxl)
# Download the data
dataset <- read_excel("SimplifiedHNData.xlsx")
# remove Sex and Patient
dataset<-dataset[,3:7]
sapply(dataset, class)
dataset$Age<-as.numeric(dataset$Age)
dataset$PrimarySite<-as.factor(dataset$PrimarySite)
#dataset$Therapy<-as.factor(dataset$Therapy)
dataset$Death<-as.factor(dataset$Death)
dataset$TStage<-ordered(dataset$TStage,levels=c("Tx","T1", "T2","T3","T4","T4a","T4b"))
dataset$NStage<-ordered(dataset$NStage)
sapply(dataset, class)
# create a list of 80% of the rows in the original dataset we can use for training
set.seed(645)
validation_index <- createDataPartition(dataset$Age, p=0.80, list=FALSE)
# select 20% of the data for validation
validation <- dataset[-validation_index,]
# use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
#dimensions of the dataset
dim(dataset)
#Look at the data
head(dataset)
#what levels are in the data?
levels(dataset$PrimarySite)
#Summarise the class distribution
percentage <- prop.table(table(dataset$PrimarySite)) * 100
cbind(freq=table(dataset$PrimarySite), percentage=percentage)
#Statistical summary
summary(dataset)
# split input and output
x <- dataset[,1:4]
y <- dataset[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
boxplot(x[,1], main=names(dataset)[1])
for(i in 2:4) {
plot(x[,i], main=names(dataset)[i])
}
# scatterplot matrix
featurePlot(x=x, y=y, plot="pairs")
qplot(Age, Death, colour=PrimarySite, data=dataset)
qplot(Age, TStage, colour=PrimarySite, data=dataset)
qplot(Age, NStage, colour=TStage, data=dataset)
qplot(PrimarySite, Age, data=dataset,
fill=PrimarySite,
geom=c("boxplot"))
tapply(dataset$Age, dataset$PrimarySite, summary)
qplot(Age, colour=PrimarySite, data=dataset, geom="density")
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# a) linear algorithms
#set.seed(7)
#fit.lda <- train(Death~., data=dataset, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Death~., data=dataset, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Death~., data=dataset, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Death~., data=dataset, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Death~., data=dataset, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list( cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
# summarize Best Model
print(fit.cart)
View(control)
View(control)
14/57
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(e1071)
library(kernlab)
library(readxl)
# Download the data
dataset <- read_excel("SimplifiedHNData.xlsx")
# Remove Sex and Patient Number
dataset<-dataset[,3:7]
sapply(dataset, class)
dataset$NStage<-ordered(dataset$NStage)
levels(dataset$NStage)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(e1071)
library(kernlab)
library(readxl)
# Download the data
dataset <- read_excel("SimplifiedHNData.xlsx")
# Remove Sex and Patient Number
dataset<-dataset[,3:7]
dataset$Age<-as.numeric(dataset$Age)
dataset$PrimarySite<-as.factor(dataset$PrimarySite)
dataset$Death<-as.factor(dataset$Death)
dataset$TStage<-ordered(dataset$TStage,levels=c("Tx","T1", "T2","T3","T4","T4a","T4b"))
dataset$NStage<-ordered(dataset$NStage)
sapply(dataset, class)
str(dataset, class)
str(dataset)
unique(dataset$TStage)
#dimensions of the dataset
dim(train_data)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(e1071)
library(kernlab)
library(readxl)
# Download the data
dataset <- read_excel("SimplifiedHNData.xlsx")
# Remove Sex and Patient Number
dataset<-dataset[,3:7]
dataset$Age<-as.numeric(dataset$Age)
dataset$PrimarySite<-as.factor(dataset$PrimarySite)
unique(dataset$PrimarySite)
dataset$Death<-as.factor(dataset$Death)
dataset$TStage<-ordered(dataset$TStage,levels=c("Tx","T1", "T2","T3","T4","T4a","T4b"))
dataset$NStage<-ordered(dataset$NStage)
unique(dataset$TStage)
unique(dataset$NStage)
str(dataset)
# create a list of 80% of the rows in the original dataset we can use for training
set.seed(645) # This is so we can re-run this and get the same again
validation_index <- createDataPartition(dataset$Age, p=0.80, list=FALSE)
# select 20% of the data for testing
test_data <- dataset[-validation_index,]
# use the remaining 80% of data to train the models
train_data <- dataset[validation_index,]
#dimensions of the dataset
dim(train_data)
#Look at the data
head(train_data)
#what levels are in the data?
levels(train_data$PrimarySite)
#Summarise the class distribution
percentage <- prop.table(table(train_data$PrimarySite)) * 100
cbind(freq=table(train_data$PrimarySite), percentage=percentage)
#Statistical summary
summary(train_data)
# scatterplot matrix
featurePlot(x=x, y=y, plot="pairs")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(e1071)
library(kernlab)
library(readxl)
# Download the data
dataset <- read_excel("SimplifiedHNData.xlsx")
# Remove Sex and Patient Number
dataset<-dataset[,3:7]
dataset$Age<-as.numeric(dataset$Age)
dataset$PrimarySite<-as.factor(dataset$PrimarySite)
unique(dataset$PrimarySite)
dataset$Death<-as.factor(dataset$Death)
dataset$TStage<-ordered(dataset$TStage,levels=c("Tx","T1", "T2","T3","T4","T4a","T4b"))
dataset$NStage<-ordered(dataset$NStage)
unique(dataset$TStage)
unique(dataset$NStage)
str(dataset)
# create a list of 80% of the rows in the original dataset we can use for training
set.seed(645) # This is so we can re-run this and get the same again
validation_index <- createDataPartition(dataset$Age, p=0.80, list=FALSE)
# select 20% of the data for testing
test_data <- dataset[-validation_index,]
# use the remaining 80% of data to train the models
train_data <- dataset[validation_index,]
#dimensions of the dataset
dim(train_data)
#Look at the data
head(train_data)
#what levels are in the data?
levels(train_data$PrimarySite)
#Summarise the class distribution
percentage <- prop.table(table(train_data$PrimarySite)) * 100
cbind(freq=table(train_data$PrimarySite), percentage=percentage)
#Statistical summary
summary(train_data)
# split input and output
x <- train_data[,1:4]
y <- train_data[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
boxplot(x[,1], main=names(train_data)[1])
for(i in 2:4) {
plot(x[,i], main=names(train_data)[i])
}
featurePlot(x=x, y=y, plot="pairs")
ggplot(data = dataset, aes(x = factor(Death), y = Age, colour = PrimarySite)) + geom_boxplot() +
xlab("Death")
ggplot(data = dataset, aes(x = TStage, y = Age, colour = NStage)) + geom_boxplot() +
xlab("TStage")
qplot(Age, Death, colour=PrimarySite, data=train_data)
qplot(PrimarySite, Age, data=train_data,
fill=PrimarySite,
geom=c("boxplot"))
qplot(Age, colour=PrimarySite, data=train_data, geom="density")
qplot(Age, colour=PrimarySite, data=train_data, geom="density")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(e1071)
library(kernlab)
library(readxl)
# Download the data
dataset <- read_excel("SimplifiedHNData.xlsx")
# Remove Sex and Patient Number
dataset<-dataset[,3:7]
dataset$Age<-as.numeric(dataset$Age)
dataset$PrimarySite<-as.factor(dataset$PrimarySite)
unique(dataset$PrimarySite)
dataset$Death<-as.factor(dataset$Death)
dataset$TStage<-ordered(dataset$TStage,levels=c("Tx","T1", "T2","T3","T4","T4a","T4b"))
dataset$NStage<-ordered(dataset$NStage)
unique(dataset$TStage)
unique(dataset$NStage)
str(dataset)
# create a list of 80% of the rows in the original dataset we can use for training
set.seed(645) # This is so we can re-run this and get the same again
validation_index <- createDataPartition(dataset$Age, p=0.80, list=FALSE)
# select 20% of the data for testing
test_data <- dataset[-validation_index,]
# use the remaining 80% of data to train the models
train_data <- dataset[validation_index,]
#dimensions of the dataset
dim(train_data)
#Look at the data
head(train_data)
#what levels are in the data?
levels(train_data$PrimarySite)
#Summarise the class distribution
percentage <- prop.table(table(train_data$PrimarySite)) * 100
cbind(freq=table(train_data$PrimarySite), percentage=percentage)
#Statistical summary
summary(train_data)
# split input and output
x <- train_data[,1:4]
y <- train_data[,5]
# boxplot for each attribute on one image
par(mfrow=c(1,4))
boxplot(x[,1], main=names(train_data)[1])
for(i in 2:4) {
plot(x[,i], main=names(train_data)[i])
}
# scatterplot matrix
featurePlot(x=x, y=y, plot="pairs")
ggplot(data = dataset, aes(x = factor(Death), y = Age, colour = PrimarySite)) + geom_boxplot() +
xlab("Death")
ggplot(data = dataset, aes(x = TStage, y = Age, colour = NStage)) + geom_boxplot() +
xlab("TStage")
qplot(PrimarySite, Age, data=train_data,
fill=PrimarySite,
geom=c("boxplot"))
tapply(train_data$Age, train_data$PrimarySite, summary)
# Run algorithms using 10-fold cross validation
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
# a) linear algorithms
#set.seed(7)
#fit.lda <- train(Death~., data=train_data, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Death~., data=train_data, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Death~., data=train_data, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Death~., data=train_data, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Death~., data=train_data, method="rf", metric=metric, trControl=control)
set.seed(7)
fit.lda <- train(Death~., data=train_data, method="lda", metric=metric, trControl=control)
#
View(fit.lda)
summary(lda)
summary(fit.lda)
print(fit.lda)
# a) linear algorithms
set.seed(7)
fit.lda <- train(Death~., data=train_data, method="lda", metric=metric, trControl=control)
# b) nonlinear algorithms
# CART
set.seed(7)
fit.cart <- train(Death~., data=train_data, method="rpart", metric=metric, trControl=control)
# kNN
set.seed(7)
fit.knn <- train(Death~., data=train_data, method="knn", metric=metric, trControl=control)
# c) advanced algorithms
# SVM
set.seed(7)
fit.svm <- train(Death~., data=train_data, method="svmRadial", metric=metric, trControl=control)
# Random Forest
set.seed(7)
fit.rf <- train(Death~., data=train_data, method="rf", metric=metric, trControl=control)
# summarize accuracy of models
results <- resamples(list( lda=fit.lda,cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf))
summary(results)
# compare accuracy of models
dotplot(results)
# summarise Best Model
print(fit.lda)
# estimate skill of LDA on the validation (test) dataset
predictions <- predict(fit.cart, test_data)
confusionMatrix(predictions, test_data$Death)
View(test_data)
sum(test_data$Death)
sum(as.numeric(test_data$Death)
)
summary(test_data$Death)
9/57
48/57
